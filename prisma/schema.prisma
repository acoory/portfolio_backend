// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean  @default(false)
  image         String?
  role          Role     @default(USER)
  bio           String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  sessions Session[]
  accounts Account[]
  posts    Post[]
  comments Comment[]

  @@unique([email])
  @@map("user")
}

enum Role {
  USER
  AUTHOR
  ADMIN
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// ============================================
// BLOG
// ============================================

model Post {
  id         String  @id @default(cuid())
  title      String
  slug       String  @unique
  excerpt    String? @db.Text
  content    String  @db.Text
  coverImage String?

  // English translations
  title_en   String?
  slug_en    String? @unique
  excerpt_en String? @db.Text
  content_en String? @db.Text

  published Boolean @default(false)
  featured  Boolean @default(false)
  viewCount Int     @default(0)
  likeCount Int     @default(0)

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  views PostViewed[]
  likes PostLiked[]

  tags     PostTag[]
  comments Comment[]

  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([slug])
  @@index([slug_en])
  @@index([authorId])
  @@index([categoryId])
  @@index([published])
  @@index([publishedAt])
  @@map("post")
}

model PostViewed {
  id     String @id @default(cuid())
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  viewerIp String
  viewedAt DateTime @default(now())

  @@index([postId])
  @@index([viewerIp])
  @@map("post_viewed")
}

model PostLiked {
  id     String @id @default(cuid())
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  likerIp String
  likedAt DateTime @default(now())

  @@unique([postId, likerIp])
  @@index([postId])
  @@index([likerIp])
  @@map("post_liked")
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String? @db.Text
  color       String?
  icon        String?

  // English translations
  name_en        String?
  description_en String? @db.Text

  parentId String?
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[] @relation("CategoryHierarchy")

  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([parentId])
  @@map("category")
}

model Tag {
  id   String @id @default(cuid())
  name String @unique
  slug String @unique

  posts PostTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@map("tag")
}

model PostTag {
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([postId, tagId])
  @@index([postId])
  @@index([tagId])
  @@map("post_tag")
}

model Comment {
  id      String @id @default(cuid())
  content String @db.Text

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  approved Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
  @@index([approved])
  @@map("comment")
}
